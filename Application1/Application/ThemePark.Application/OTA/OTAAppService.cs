using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Threading.Tasks;
using Abp.AutoMapper;
using Abp.Configuration;
using Abp.Domain.Repositories;
using ThemePark.Application.OTA.DTO;
using ThemePark.Core.Agencies;
using ThemePark.Core.AgentTicket;
using ThemePark.Core.AgentTicket.Repositories;
using ThemePark.Core.BasicData;
using ThemePark.Core.BasicTicketType;
using ThemePark.Core.TradeInfos;
using ThemePark.Core.TradeInfos.DomainServiceInterfaces;
using ThemePark.Infrastructure.Application;
using AutoMapper.QueryableExtensions;
using System.Data.Entity;
using System.Drawing;
using System.Drawing.Imaging;
using System.Text;
using System.Text.RegularExpressions;
using System.Transactions;
using Abp.BackgroundJobs;
using Abp.Dependency;
using Abp.EntityFramework.Uow;
using Newtonsoft.Json;
using ThemePark.Application.AgentTicket.Interfaces;
using ThemePark.Application.DataSync.Dto;
using ThemePark.Application.Message;
using ThemePark.Common;
using ThemePark.Core.DataSync;
using ThemePark.Core.ParkSale;
using ThemePark.Core.Settings;
using ThemePark.EntityFramework;
using ThemePark.Application.SaleCard.Dto;
using ThemePark.Infrastructure.EntityFramework;

namespace ThemePark.Application.OTA
{
    public class OTAAppService : ThemeParkAppServiceBase, IOTAAppService
    {
        private readonly ITOHeaderRepository _tOHeaderRepository;
        private readonly IRepository<Park> _parkRepository;
        private readonly IRepository<AgencySaleTicketClass> _agencySaleTicketClassRepository;
        private readonly IRepository<TicketClass> _ticketClassRepository;
        private readonly ITradeInfoDomainService _tradeInfoDomainService;
        private readonly IOnlineTravelDomainService _onlineTravelDomainService;
        private readonly ITOVoucherDomainService _toVoucherDomainService;
        private readonly IRepository<TOVoucher, string> _toVoucherRepository;
        private readonly IRepository<ParkAgencyTypeGroupType> _parkAgencyTypeGroupTypeRepository;
        private readonly ITOBodyDomainService _toBodyDomainService;
        private readonly IRepository<TOBody, string> _tobodyRepository;
        private readonly ITOTicketDomainService _toticketDomainService;
        private readonly IOTADataSync _otaDataSync;
        private readonly ISmsAppService _smsAppService;
        private readonly IAgencySaleTicketClassAppService _agencySaleTicketClassAppService;
        private readonly IQRCodeAppService _qrCodeAppService;
        private readonly ISettingManager _settingManager;
        private readonly IRepository<TOMessage> _toMessageRepository;
        private readonly IRepository<SyncPark> _syncParkRepository;
        private readonly IRepository<ParkAgency> _parkAgencyRepository;
        private readonly IRepository<TORefund, long> _torefundRepository;
        private readonly IRepository<Agency> _agencyRepository;
        private readonly IBackgroundJobManager _backgroundJobManager;
        private readonly IRepository<TOTicket, string> _toticketRepository;


        public OTAAppService(IRepository<AgencySaleTicketClass> agencySaleTicketClassRepository, IRepository<TicketClass> ticketClassRepository,
            ITradeInfoDomainService tradeInfoDomainService, IOnlineTravelDomainService onlineTravelDomainService, ITOVoucherDomainService toVoucherDomainService,
            ITOHeaderRepository tOHeaderRepository, IRepository<TOVoucher, string> toVoucherRepository, IRepository<ParkAgencyTypeGroupType> parkAgencyTypeGroupTypeRepository,
            IRepository<ParkAgency> parkAgencyRepository, ITOBodyDomainService toBodyDomainService, IRepository<TOBody, string> tobodyRepository,
            IRepository<Park> parkRepository, ITOTicketDomainService toticketDomainService, IOTADataSync otaDataSync,
            IAgencySaleTicketClassAppService agencySaleTicketClassAppService, ISmsAppService smsAppService,
            IQRCodeAppService qrCodeAppService, ISettingManager settingManager, IRepository<SyncPark> syncParkRepository,
            IRepository<TOMessage> toMessageRepository, IRepository<ParkAgency> parkAgencyRepository1,
            IRepository<TORefund, long> torefundRepository, IRepository<Agency> agencyRepository,
            IBackgroundJobManager backgroundJobManager, IRepository<TOTicket, string> toticketRepository)
        {

            _agencySaleTicketClassRepository = agencySaleTicketClassRepository;
            _ticketClassRepository = ticketClassRepository;
            _tradeInfoDomainService = tradeInfoDomainService;
            _onlineTravelDomainService = onlineTravelDomainService;
            _toVoucherDomainService = toVoucherDomainService;
            _tOHeaderRepository = tOHeaderRepository;
            _toVoucherRepository = toVoucherRepository;
            _parkAgencyTypeGroupTypeRepository = parkAgencyTypeGroupTypeRepository;
            _toBodyDomainService = toBodyDomainService;
            _tobodyRepository = tobodyRepository;
            _parkRepository = parkRepository;
            _toticketDomainService = toticketDomainService;
            _otaDataSync = otaDataSync;
            _agencySaleTicketClassAppService = agencySaleTicketClassAppService;
            _smsAppService = smsAppService;
            _qrCodeAppService = qrCodeAppService;
            _settingManager = settingManager;
            _syncParkRepository = syncParkRepository;
            _toMessageRepository = toMessageRepository;
            _parkAgencyRepository = parkAgencyRepository1;
            _torefundRepository = torefundRepository;
            _agencyRepository = agencyRepository;
            _backgroundJobManager = backgroundJobManager;
            _toticketRepository = toticketRepository;
        }



        /// <summary>
        /// 查询电子年卡信息
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<List<ECardDetailDto>>> SearchECardDetailAsync(ECardDetailInput input)
        {
            //List<ECardDetailDto> listECardDetailDto = new List<ECardDetailDto>();

            //ECardDetailDto eCardDetail = new ECardDetailDto();
            //eCardDetail.CardNo = "888888";
            //eCardDetail.ECardId = "628888888888888888";
            //eCardDetail.IcNo = "628888888888888888";
            //eCardDetail.State = Core.CardManage.VipCardStateType.Actived;
            //eCardDetail.TicketClassName = "双人卡";
            //eCardDetail.ValidDateBegin = "2017-10-08";
            //eCardDetail.ValidDateEnd = "2018-10-07";
            //eCardDetail.ECardType = ECardType.DoubleCard;


            //List<ECardCustoerDto> listECardCustoerDto = new List<ECardCustoerDto>();

            //ECardCustoerDto eCardCustoer = new ECardCustoerDto();
            //eCardCustoer.CustomName = "熊大";
            //eCardCustoer.Gender = GenderType.Female;
            //eCardCustoer.PhoneNumber = "13866668888";
            //eCardCustoer.PhotoString = "
            //eCardCustoer.Pid = "36066619901010234X";

            //listECardCustoerDto.Add(eCardCustoer);

            //List<ECardParkDto> listECardParkDto = new List<ECardParkDto>();
            //ECardParkDto eCardParkDto = new ECardParkDto();
            //eCardParkDto.ParkCode = "11";
            //eCardParkDto.ParkName = "芜湖方特欢乐世界";

            //listECardParkDto.Add(eCardParkDto);


            //ECardParkDto eCardParkDto2 = new ECardParkDto();
            //eCardParkDto2.ParkCode = "13";
            //eCardParkDto2.ParkName = "芜湖方特梦幻王国";

            //listECardParkDto.Add(eCardParkDto2);

            //ECardParkDto eCardParkDto3 = new ECardParkDto();
            //eCardParkDto3.ParkCode = "15";
            //eCardParkDto3.ParkName = "芜湖方特东方神画";

            //listECardParkDto.Add(eCardParkDto3);

            //ECardParkDto eCardParkDto4 = new ECardParkDto();
            //eCardParkDto4.ParkCode = "17";
            //eCardParkDto4.ParkName = "芜湖方特水上乐园";

            //listECardParkDto.Add(eCardParkDto4);
            //eCardDetail.ECardPark = listECardParkDto;


            //ECardCustoerDto eCardCustoer2 = new ECardCustoerDto();
            //eCardCustoer2.CustomName = "熊二";
            //eCardCustoer2.Gender = GenderType.Female;
            //eCardCustoer2.PhoneNumber = "13866669999";
            //eCardCustoer2.PhotoString = "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
            //eCardCustoer2.Pid = "36066619921010234X";

            //listECardCustoerDto.Add(eCardCustoer2);

            //eCardDetail.ECardCustoer = listECardCustoerDto;

            //listECardDetailDto.Add(eCardDetail);


            //////
            //ECardDetailDto eCardDetail2 = new ECardDetailDto();
            //eCardDetail2.CardNo = "999999";
            //eCardDetail2.ECardId = "628888888888888999";
            //eCardDetail2.IcNo = "628888888888888999";
            //eCardDetail2.State = Core.CardManage.VipCardStateType.Actived;
            //eCardDetail2.TicketClassName = "单人季卡";
            //eCardDetail2.ValidDateBegin = "2017-10-08";
            //eCardDetail2.ValidDateEnd = "2018-01-07";
            //eCardDetail.ECardType = ECardType.SingleCard;

            //List<ECardParkDto> listECardParkDto2 = new List<ECardParkDto>();
            //ECardParkDto eCardParkDto44 = new ECardParkDto();
            //eCardParkDto44.ParkCode = "11";
            //eCardParkDto44.ParkName = "芜湖方特欢乐世界";
            //listECardParkDto2.Add(eCardParkDto44);
            //eCardDetail2.ECardPark = listECardParkDto2;

            //ECardCustoerDto eCardCustoer3 = new ECardCustoerDto();
            //eCardCustoer3.CustomName = "光头强";
            //eCardCustoer3.Gender = GenderType.Female;
            //eCardCustoer3.PhoneNumber = "13866668888";
            //eCardCustoer3.PhotoString = "
            //eCardCustoer3.Pid = "36066619901022234X";

            //List<ECardCustoerDto> listECardCustoerDto2 = new List<ECardCustoerDto>();
            //listECardCustoerDto2.Add(eCardCustoer3);
            //eCardDetail2.ECardCustoer = listECardCustoerDto2;

            //listECardDetailDto.Add(eCardDetail2);

            //return Result.FromData(listECardDetailDto);


            //调其它公园接口查询电子年卡信息 
            var park = await _parkRepository.FirstOrDefaultAsync(p => p.ParkCode == input.parkid);

            if (park == null)
            {
                return Result.FromError<List<ECardDetailDto>>("公园ID不存在");
            }
            //公园同步接口

            var syncParkId = park.Id;
            var sync = await _syncParkRepository.GetAll().FirstAsync(o => o.ParkId == syncParkId);
            var uri = new Uri(sync.SyncUrl);

            var response = await HttpHelper.PostAsync(uri.AbsoluteUri.Replace(uri.LocalPath, ""), "/Api/VipCard/GetECardDetial", JsonConvert.SerializeObject(input));
            if (response == null || response == "")
            {
                return Result.FromError<List<ECardDetailDto>>("未从公园获取到相关年卡信息");
            }

            var result = JsonConvert.DeserializeObject<Result<List<ECardDetailDto>>>(response);

            return result;

        }

        /// <summary>
        /// 获取电子年卡信息(无照片)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<List<ECardDetailDto>>> SearchECardDetailNoPhotoAsync(ECardDetailInput input)
        {

            //调其它公园接口查询电子年卡信息 
            var park = await _parkRepository.FirstOrDefaultAsync(p => p.ParkCode == input.parkid);

            if (park == null)
            {
                return Result.FromError<List<ECardDetailDto>>("公园ID不存在");
            }
            //公园同步接口

            var syncParkId = park.Id;
            var sync = await _syncParkRepository.GetAll().FirstAsync(o => o.ParkId == syncParkId);
            var uri = new Uri(sync.SyncUrl);

            var response = await HttpHelper.PostAsync(uri.AbsoluteUri.Replace(uri.LocalPath, ""), "/Api/VipCard/GetECardDetialNoPhoto", JsonConvert.SerializeObject(input));
            if (response == null || response == "")
            {
                return Result.FromError<List<ECardDetailDto>>("未从公园获取到相关年卡信息");
            }

            var result = JsonConvert.DeserializeObject<Result<List<ECardDetailDto>>>(response);

            return result;
        }



        /// <summary>
        /// 查询电子年卡照片
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<string>> GetVipCardPhotoAsync(ECardPhotoInput input)
        {
            //调其它公园接口查询电子年卡信息 
            var park = await _parkRepository.FirstOrDefaultAsync(p => p.ParkCode == input.parkid);

            if (park == null)
            {
                return Result.FromError<string>("公园ID不存在");
            }
            //公园同步接口

            var syncParkId = park.Id;
            var sync = await _syncParkRepository.GetAll().FirstAsync(o => o.ParkId == syncParkId);
            var uri = new Uri(sync.SyncUrl);

            var response = await HttpHelper.PostAsync(uri.AbsoluteUri.Replace(uri.LocalPath, ""), "/Api/VipCard/GetECardPhoto", JsonConvert.SerializeObject(input));
            if (string.IsNullOrEmpty(response))
            {
                return Result.FromError<string>("未从相关公园获取到照片");
            }

            var result = JsonConvert.DeserializeObject<Result<string>>(response);

            return result;
        }

        /// <summary>
        /// 电商订票
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<OTAOrderDto>> AddOTAOrderAsync(OrderInput input)
        {
            //验证业务规则
            var validateResult = await OrderValidate(input);
            if (!validateResult.Success)
            {
                OTAOrderDto returnDto = new OTAOrderDto();
                //订单重复返回重复票
                if (validateResult.Code == ResultCode.OrderAlreadyExist)
                {
                    returnDto.TOHeaderId = validateResult.Data.Order.Id;
                    returnDto.QRCode = _qrCodeAppService.GenerateQRCodeImg(validateResult.Data.Order.Id).ImageToBase64(ImageFormat.Jpeg);
                }
                return Result.FromCode(validateResult.Code, returnDto, validateResult.Message);
            }
            //创建主订单
            var toHead = await CreateOrder(input, validateResult.Data);
            await _tOHeaderRepository.InsertAndGetIdAsync(toHead);

            Task<Image> image = null;
            //是否需要发送二维码
            var needSendQrCodeImg = IsGenerateQrCodeImg(input.AgencyId);
            //异步生成二维码图片
            if (needSendQrCodeImg)
                image = Task.FromResult(_qrCodeAppService.GenerateQRCodeImg(toHead.Id));

            var validDays = 0;
            //有传结束时间，生成票要重新设置有效期
            if (input.ValidEndDate.HasValue && input.ValidEndDate.Value > input.ValidStartDate)
            {
                validDays = input.ValidEndDate.Value.Subtract(input.ValidStartDate).Days;
            }
            //生成票
            var toTickets = await CreateTicket(toHead, validDays);
            await UnitOfWorkManager.Current.SaveChangesAsync();
            //同步订单数据
            var orderSend = new OrderSendDto()
            {
                OrderInfo = toHead.MapTo<SendTOHeader>(),
                TicketsInfo = toTickets.MapTo<ICollection<SendTOTicket>>()
            };
            _otaDataSync.SynOrderAsync(orderSend, validateResult.Data.Park.Id);

            var notSendMessage = ConfigurationManager.AppSettings["NotSendMessage"].Split(',');
            if (!notSendMessage.Contains(input.AgencyId.ToString()))
                await SendMessage(toHead, input.EmailServer);
            return Result.FromData(new OTAOrderDto() { TOHeaderId = toHead.Id, QRCode = needSendQrCodeImg ? image.Result.ImageToBase64(ImageFormat.Jpeg) : null });

        }

        /// <summary>
        /// 预订订单
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<OTAPreOrderDto>> PreOrderAsync(OrderInput input)
        {
            //验证业务规则
            var validateResult = await OrderValidate(input);
            if (!validateResult.Success)
                return Result.FromCode<OTAPreOrderDto>(validateResult.Code);

            var toHead = await CreateOrder(input, validateResult.Data);
            //保存订单
            await _tOHeaderRepository.InsertAsync(toHead);
            return Result.FromData(new OTAPreOrderDto() { TOHeaderId = toHead.Id });
        }

        /// <summary>
        /// 订单支付确认
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<OTAPayOrderDto>> PayOrderAsync(PayOrderInput input)
        {
            //验证业务规则
            var validateResult = await PayOrderValidate(input);
            if (!validateResult.Success)
                return Result.FromCode<OTAPayOrderDto>(validateResult.Code);
            var order = validateResult.Data.Order;

            var toTickets = await CreateTicket(order);

            //订单状态置为待消费
            //foreach (var body in order.TOBodies)
            //{
            //    body.OrderState = OrderState.WaitCost;
            //}
            //await _tOHeaderRepository.UpdateAsync(order);

            //同步订单数据
            var orderSend = new OrderSendDto()
            {
                OrderInfo = order.MapTo<SendTOHeader>(),
                TicketsInfo = toTickets.MapTo<ICollection<SendTOTicket>>()
            };
            _otaDataSync.SynOrderAsync(orderSend, validateResult.Data.Park.Id);

            //生成二维码图片
            var image = _qrCodeAppService.GenerateQRCodeImg(order.Id);
            var notSendMessage = ConfigurationManager.AppSettings["NotSendMessage"].Split(',');
            if (!notSendMessage.Contains(input.AgencyId.ToString()))
#pragma warning disable CS4014 // 由于此调用不会等待，因此在调用完成前将继续执行当前方法
                SendMessage(order, input.EmailServer);
#pragma warning restore CS4014 // 由于此调用不会等待，因此在调用完成前将继续执行当前方法
            return Result.FromData(new OTAPayOrderDto() { TOHeaderId = order.Id, QRCode = image.ImageToBase64(ImageFormat.Jpeg) });

        }


        /// <summary>
        /// 取消订单
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<string>> CancelOTAOrderAsync(OTACancelOrderInput input)
        {
            //验证业务规则
            var validateResult = await OrderCancelValidate(input);
            if (!validateResult.Success)
                return Result.FromCode<string>(validateResult.Code);

            //总额
            decimal totalAmount = 0;
            var entity = validateResult.Data.Order;
            foreach (var tobody in entity.TOBodies)
            {
                if (tobody.OrderState != OrderState.WaitCost)
                    continue;
                tobody.OrderState = OrderState.OrderRefunded;
                //计算退款金额
                totalAmount += tobody.Amount;
            }

            //写退款交易信息
            var tradeInfo = new TradeInfo
            {
                Amount = totalAmount,
                TradeType = TradeType.Outlay,
                TradeInfoDetails = new List<TradeInfoDetail>
                {
                    new TradeInfoDetail
                    {
                        Amount = totalAmount,
                        PayModeId = PayType.WebPay,
                        PayStatus = PayStatus.PaySuccess
                    }
                }
            };

            //公园退单接口
            var sync = await _syncParkRepository.GetAll().FirstAsync(o => o.ParkId == validateResult.Data.Park.Id);
            var uri = new Uri(sync.SyncUrl);

            try
            {
                using (var trans = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                {
                    var tradeinfoResult = await _tradeInfoDomainService.AddTradeInfo4RefundAsync(tradeInfo, validateResult.Data.Park.Id);

                    //写退票记录
                    await _torefundRepository.InsertAsync(new TORefund()
                    {
                        TOHeaderId = entity.Id,
                        Amount = tradeinfoResult.Amount,
                        TradeInfoId = tradeinfoResult.Id
                    });

                    //修改订单状态为已退款
                    await _tOHeaderRepository.UpdateAsync(validateResult.Data.Order);

                    await UnitOfWorkManager.Current.GetDbContext<ThemeParkDbContext>().SaveChangesAsync();

                    //现在只能退所有未使用子订单
                    var response = await HttpHelper.PostAsync(uri.AbsoluteUri.Replace(uri.LocalPath, ""), "/Api/OtaOrder/RefundOrder?toHeaderId=" + entity.Id, string.Empty);
                    var result = JsonConvert.DeserializeObject<Result<bool>>(response);
                    if (!result.Success)
                    {
                        throw new RefundFailedException();
                    }

                    trans.Complete();
                }
            }
            catch (RefundFailedException ex)
            {
                return Result.FromCode<string>(ResultCode.OrderCancelFailAlreadyUsed, "订单退款失败。可能的原因：订单已被消费。");
            }

            //同步退票数据
            //_otaDataSync.SynCancelAsync(new OrderRefundDto() { TOHeaderId = entity.Id }, validateResult.Data.Park.Id);

            return Result.FromData(entity.Id);
        }

        /// <summary>
        /// 搜索订单
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<List<OTAOrderDetailDto>>> SearchOTAOrderAsync(OTADetailInput input)
        {
            //验证业务规则
            var validateResult = await OrderDetailValidate(input);
            if (!validateResult.Success)
                return Result.FromCode<List<OTAOrderDetailDto>>(validateResult.Code);

            var search = new Query<TOBody>(p => p.ParkId == validateResult.Data.Park.Id && p.AgencySaleTicketClass.AgencyId == input.AgencyId);
            var query = search.GetFilter();

            //OTA使用toheaderid查询
            if (validateResult.Data.OTAType == OTAType.OTA)
                query = query.And(p => p.TOHeaderId == input.TOHeaderId || p.TOHeader.AgentOrderId == input.AgentOrderId);
            //自有渠道使用AgentOrderId查询
            else if (validateResult.Data.OTAType == OTAType.OwnOTA)
                query = query.And(p => p.TOHeader.AgentOrderId == input.TOHeaderId);

            var result = await _tobodyRepository.GetAllListAsync(query);
            var dtos = result.MapTo<List<OTAOrderDetailDto>>();

            foreach (var item in dtos)
            {
                item.ParkCode = validateResult.Data.Park.ParkCode;
                item.ParkName = validateResult.Data.Park.ParkName;
            }
            return Result.FromData(dtos);
        }


        /// <summary>
        /// 查询身份证订票数量
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result<List<CheckPidDto>>> CheckOTAPidAsync(CheckPidInput input)
        {
            //分解获取身份证列表
            var idnums = input.idnums.Split(',');

            //查询身份证有效订单结果
            var result = await _tobodyRepository.GetAll()
                .Where(p => idnums.Contains(p.Customer.Pid) && p.TOHeader.AgencyId == input.AgencyId &&
                            p.TOHeader.ValidStartDate == input.ValidStartDate.Date && p.OrderState == OrderState.WaitCost)
                .ProjectTo<CheckPidDto>()
                .ToListAsync();

            //合并相同身份证数据
            var dto = result.GroupBy(p => p.Pid).Select(p => new CheckPidDto() { Pid = p.Key, Qty = p.Sum(m => m.Qty) }).ToList();
            return Result.FromData(dto);
        }


        /// <summary>
        /// 修改身份证
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result> ModifyPidAsync(ModifyPidInput input)
        {
            //验证业务规则
            var validateResult = await ModifyPidValidate(input);
            if (!validateResult.Success)
                return Result.FromCode<string>(validateResult.Code);

            var toBodies = validateResult.Data.Order.TOBodies.Where(p => p.Customer.Pid == input.OldPid);

            //需同步数据
            var syncModifyData = new List<ModifyPid>();
            foreach (var subOrder in toBodies)
            {
                subOrder.Customer.Pid = input.Pid;
                //更新用户表身份证
                await _tobodyRepository.UpdateAsync(subOrder);
                //更新凭证身份证
                var tovoucher = await _toVoucherRepository.FirstOrDefaultAsync(p => p.TOBodyId == subOrder.Id);
                tovoucher.Pid = input.Pid;
                await _toVoucherRepository.UpdateAsync(tovoucher);
                syncModifyData.Add(new ModifyPid() { Pid = input.Pid, TOBodyId = subOrder.Id });
            }

            //同步修改公园身份证
            var modifyDto = new OrderModifyDto()
            {
                ModifyType = ModifyType.ModifyPid,
                PidData = syncModifyData,
            };
            _otaDataSync.SynModifyDataAsync(modifyDto, validateResult.Data.Park.Id);

            return Result.Ok();
        }


        /// <summary>
        /// 改签
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Result> ModifyPlandateAsync(OTAModifyPlandateInput input)
        {
            //验证业务规则
            var validateResult = await ModifyPlandateValidate(input);
            if (!validateResult.Success)
                return Result.FromCode<string>(validateResult.Code);
            var order = validateResult.Data.Order;
            order.ValidStartDate = input.ValidStartDate;

            //更新中心预订日期
            await _tOHeaderRepository.UpdateAsync(order);

            //同步修改公园身份证
            var modifyDto = new OrderModifyDto()
            {
                ModifyType = ModifyType.ModifyPlanDate,
                ValidStartDateData = new ModifyValidStartDate()
                {
                    TOHeaderId = order.Id,
                    ValidStartDate = order.ValidStartDate
                },
            };
            _otaDataSync.SynModifyDataAsync(modifyDto, validateResult.Data.Park.Id);

            return Result.Ok();

        }

        /// <summary>
        /// 通过手机号查询订单
        /// </summary>
        /// <param name="phone"></param>
        /// <returns></returns>
        public async Task<Result<List<OTASearchByPhoneDto>>> SearchOTAOrderByPhone(string phone)
        {
            var result = await _toVoucherRepository.GetAllListAsync(p => p.Customer.PhoneNumber == phone);

            var dtos = result.MapTo<List<OTASearchByPhoneDto>>();

            return Result.FromData(dtos);
        }

        /// <summary>
        /// 创建OTA订单
        /// </summary>
        private async Task<TOHeader> CreateOrder(OrderInput input, ValidateResult validateResult)
        {
            input.TOBodies.ForEach(p => p.AgencySaleTicketClassId = validateResult.TicketTypes[p.TicketTypeId].Id);
            TOHeader toHead = input.MapTo<TOHeader>();
            foreach (var toBody in toHead.TOBodies)
            {
                //获取促销票数据
                var ticket = validateResult.TicketTypes.First(p => p.Value.Id == toBody.AgencySaleTicketClassId).Value;

                //从基础票获取入园人数
                var persons = (await _ticketClassRepository.GetAsync(ticket.ParkSaleTicketClass.TicketClassId)).TicketType.Persons;

                //构造子订单数据
                toBody.ParkId = validateResult.Park.Id;
                //toBody.CustId = customerId;
                toBody.Price = ticket.Price;
                toBody.SalePrice = ticket.SalePrice;
                toBody.Amount = ticket.SalePrice * toBody.Qty;
                toBody.SettlementPrice = ticket.SettlementPrice;
                toBody.ParkSettlementPrice = ticket.ParkSettlementPrice;
                toBody.OrderState = OrderState.WaitPay;
                toBody.Persons = persons * toBody.Qty;
                toHead.Qty += toBody.Qty;
                toHead.Amount += toBody.Amount;
                toHead.Persons += toBody.Persons;
                toHead.GroupTypeId = ticket.GroupTypeId;
                toHead.OrderType = OrderType.OTAOrder;
            }
            //保存主订单
            await _onlineTravelDomainService.InitialOrderAsync(toHead);
            return toHead;

        }


        /// <summary>
        /// 付款生成电子票
        /// </summary>
        /// <param name="order"></param>
        /// <param name="validDays"></param>
        /// <returns></returns>
        private async Task<List<TOTicket>> CreateTicket(TOHeader order, int validDays = 0)
        {
            //生成交易记录
            var tradeInfo = new TradeInfo()
            {
                Amount = order.Amount,
                TradeType = TradeType.Income,
                TradeInfoDetails = new List<TradeInfoDetail>() { new TradeInfoDetail()
                {
                    OutTradeno = order.AgentTradeNo,
                    Amount = order.Amount,
                    PayModeId = PayType.WebPay,
                    PayStatus = PayStatus.PaySuccess
                } }
            };

            await _tradeInfoDomainService.AddTradeInfoAsync(tradeInfo, order.TOBodies.First().ParkId);
            //更新主订单交易号
            order.TradeInfoId = tradeInfo.Id;

            //电子票数据
            List<TOTicket> toTickets = new List<TOTicket>();
            List<TOVoucher> toVouchers = new List<TOVoucher>();

            //生成凭证、电子票
            foreach (var toBody in order.TOBodies)
            {
                //一票一记录，分票输出
                for (int i = 0; i < toBody.Qty; i++)
                {
                    var toVoucher = new TOVoucher()
                    {
                        CustomerId = toBody.CustomerId,
                        ParkId = toBody.ParkId,
                        Pid = toBody.Customer.Pid,
                        TOBodyId = toBody.Id,
                        Seq = toBody.Seq
                    };
                    //赋值TOvoucher ID
                    await _toVoucherDomainService.InitialVoucherIdAsync(toVoucher);
                    await _toVoucherRepository.InsertAsync(toVoucher);
                    toVouchers.Add(toVoucher);
                    var toTicket = new TOTicket
                    {
                        //VoucherId自动生成
                        //InvoiceId 电子票为null
                        ParkId = toBody.ParkId,
                        Qty = 1,
                        AgencySaleTicketClassId = toBody.AgencySaleTicketClassId,
                        Price = toBody.Price,
                        SalePrice = toBody.SalePrice,
                        SettlementPrice = toBody.SettlementPrice,
                        ParkSettlementPrice = toBody.ParkSettlementPrice,
                        Amount = toBody.SalePrice,
                        TicketSaleStatus = TicketSaleStatus.Valid,
                        ValidStartDate = order.ValidStartDate.Date,
                        ValidDays = validDays,
                        TOVoucherId = toVoucher.Id,
                        TOVoucher = toVoucher

                    };
                    //parkId取中心 0 ,没有实际终端 以出票公园ID当做终端
                    await _toticketDomainService.InitialTOTicketAsync(toTicket, 0,toTicket.ParkId);
                    await _toticketRepository.InsertAsync(toTicket);
                    toTickets.Add(toTicket);
                }

            }

            //订单状态置为待消费
            foreach (var body in order.TOBodies)
            {
                body.OrderState = OrderState.WaitCost;
            }
            await _tOHeaderRepository.UpdateAsync(order);
            //批量插入数据库
            //await UnitOfWorkManager.Current.GetDbContext<ThemeParkDbContext>().BulkInsertAsync(toVouchers);
            //await UnitOfWorkManager.Current.GetDbContext<ThemeParkDbContext>().BulkInsertAsync(toTickets);

            return toTickets;
        }


        /// <summary>
        /// 发送短信，返回二维码图片数据
        /// </summary>
        private async Task SendMessage(TOHeader order, string emailServer)
        {
            //二维码路径
            var path = $"api/V1QRCode?orderId={order.Id}";

            //短信模板
            //eg:确认码：{0}，您已成功通过“{1}”预订{2}：{3}，{4}当日有效。入园方式：刷身份证或二维码入园；凭身份证取票入园。查看二维码：{5};
            var messageTemplate = await _settingManager.GetSettingValueAsync(V1OTASetting.MessageTemplate);
            //var messageTemplate = "确认码：{0}，您已成功通过“{1}”预订{2}：{3}，{4}当日有效。入园方式：刷身份证或二维码入园；凭身份证取票入园。查看二维码：{5}";

            //0:订单号
            //格式转换 每四位字符加上一个空格 易读取
            //eg 1000 1000 1000 1000
            var orderId = Regex.Replace(order.Id, @"(\w{4}(?=[^$]))", "$1 ");

            //1:代理商名称
            //eg:驴妈妈
            var agencyName = (await _agencyRepository.GetAsync(order.AgencyId)).AgencyName;

            //2:公园名称
            //eg:济南方特东方神画
            var parkName = order.TOBodies.First().Park.ParkName;

            //3:订单详情 
            //eg:全价票2张、儿童票1张
            var orderDetail = new StringBuilder();
            order.TOBodies.ForEach(p => orderDetail.Append($"{p.AgencySaleTicketClass.AgencySaleTicketClassName}{p.Qty}张、"));
            var detail = orderDetail.ToString();
            detail = detail.Remove(detail.Length - 1);

            //4:预订日期
            //eg：2016-05-16
            var validStartDate = order.ValidStartDate.Date.ToString("yyyy-MM-dd");

            //5:二维码路径
            var emailPath = $"http://{emailServer}/" + path;
            var message = string.Format(messageTemplate, orderId, agencyName, parkName, detail, validStartDate, emailPath);

            //接口一单只预留一个电话
            var phone = order.TOBodies.First().Customer.PhoneNumber;

            _backgroundJobManager.Enqueue<SendMessageJob, SendMessageJobArgs>(new SendMessageJobArgs()
            {
                TOMessage = ToMessageRecord(order, message),
                Phones = new List<string>() { phone },
                Message = message
            });
        }


        /// <summary>
        /// 判断代理商是否需要返回二维码
        /// </summary>
        /// <param name="agencyId"></param>
        /// <returns></returns>
        private bool IsGenerateQrCodeImg(int agencyId)
        {
            var enableAgency = ConfigurationManager.AppSettings["EnableQrImageAgency"].Split(',');
            if (enableAgency.Contains(agencyId.ToString()))
                return false;
            return true;
        }


        /// <summary>
        /// 增加短信发送记录
        /// </summary>
        /// <returns></returns>
        private TOMessage ToMessageRecord(TOHeader order, string message)
        {
            var entity = new TOMessage()
            {
                TOHeaderId = order.Id,
                AgencyId = order.AgencyId,
                Message = message,
                SendTo = order.TOBodies.First().Customer.PhoneNumber,
                CustomerId = order.TOBodies.First().CustomerId,
                SendTime = DateTime.Now,
            };
            return entity;

        }

        /// <summary>
        /// 订票业务验证
        /// </summary>
        /// <returns></returns>
        private async Task<Result<ValidateResult>> OrderValidate(OrderInput input)
        {
            var result = new ValidateResult();

            //验证公园编号，PS:必须先验证公园编号
            var parkCodeResult = await ValidateParkCode(input);
            if (!parkCodeResult.Success)
                return Result.FromCode<ValidateResult>(parkCodeResult.Code);
            result.Park = parkCodeResult.Data;

            //验证旅游网预付款余额，小于等于最低限制时，提示下单失败
            var agencyTypeEntity = await _parkAgencyRepository.AsNoTracking()
                .Where(m => m.ParkId == result.Park.Id && m.AgencyId == input.AgencyId)
                .Select(m => m.AgencyType)
                .FirstAsync();
            if (agencyTypeEntity == null)
                return Result.FromCode<ValidateResult>(ResultCode.Fail, "无相应的代理商类型");
            else if (agencyTypeEntity.DefaultAgencyType == DefaultAgencyType.Ota)//代理商类型为旅游网
            {
                var agencyEntity = _agencyRepository.GetAllIncluding(s => s.Account).FirstOrDefault(s => s.Id == input.AgencyId);
                var accountEntity = agencyEntity?.Account;
                if (agencyEntity == null || accountEntity == null)
                    return Result.FromCode<ValidateResult>(ResultCode.Fail, "无相应的代理商或代理商帐号");
                else if (accountEntity.Balance <= accountEntity.LeastBalance)
                {
                    return Result.FromCode<ValidateResult>(ResultCode.InsufficientBalance);
                }
            }

            //验证订票日期
            input.ValidPlanDate = input.ValidStartDate;
            var planDateResult = await ValidatePlanDate(input);
            if (!planDateResult.Success)
                return Result.FromCode<ValidateResult>(planDateResult.Code);

            //验证票类
            input.ValidTicketTypeIds = input.TOBodies.Select(p => p.TicketTypeId).ToList();
            var ticketTypeResult = await ValidateTicketType(input, result.Park.Id, input.AgencyId);
            result.TicketTypes = ticketTypeResult.Data;
            if (!ticketTypeResult.Success)
                return Result.FromCode(ticketTypeResult.Code, result);

            //验证订单是否存在(新增订单唯一性)
            input.ValidOrderId.AgencyId = input.AgencyId;
            input.ValidOrderId.AgentOrderId = input.AgentOrderId;
            var orderExitResult = await ValidateOrderExit(input);
            result.Order = orderExitResult.Data;
            if (orderExitResult.Success)
                return Result.FromCode(ResultCode.OrderAlreadyExist, result);

            //验证身份证订票限制
            input.TOBodies.ForEach(p => input.ValidPidAllowQties.Add(new ValidPidAllowQty() { Pid = p.Customer.Pid, Qty = p.Qty }));
            input.ValidPlanDate = input.ValidStartDate;
            var pidLimitResult = await ValidatePidTicketNum(input, result.Park.Id, input.AgencyId);
            if (!pidLimitResult.Success)
                return Result.FromCode<ValidateResult>(pidLimitResult.Code);

            //验证订单总价
            //var orderAmoundResult = await ValidateOrderAmount(input.TOBodies);
            //if (!orderAmoundResult.Success)
            //    return Result.FromCode<ValidateResult>(orderAmoundResult.Code);

            return Result.FromData(result);
        }


        /// <summary>
        /// 查询订单业务验证
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task<Result<ValidateResult>> OrderDetailValidate(OTADetailInput input)
        {
            ValidateResult result = new ValidateResult();


            ////必须先验证公园编号
            ////验证公园编号
            //var parkCodeResult = await ValidateParkCode(input);
            //if (!parkCodeResult.Success)
            //    return Result.FromCode<ValidateResult>(parkCodeResult.Code);
            //result.Park = parkCodeResult.Data;

            //验证OTA或者自有渠道
            input.ValidOTAType.AgencyId = input.AgencyId;
            var OTATypeResult = await ValidateIsOwnOTA(input);
            if (!OTATypeResult.Success)
                return Result.FromCode<ValidateResult>(OTATypeResult.Code);
            result.OTAType = OTATypeResult.Data;

            //验证订单是否存在
            //OTA渠道 传toheaderID,按AgentOrderId算
            if (result.OTAType == OTAType.OwnOTA)
                input.ValidOrderId.AgentOrderId = input.TOHeaderId;
            else
                input.ValidOrderId.AgentOrderId = input.AgentOrderId;

            input.ValidOrderId.TOHeaderId = input.TOHeaderId;
            input.ValidOrderId.AgencyId = input.AgencyId;

            var orderExitResult = await ValidateOrderExit(input);
            if (!orderExitResult.Success)
                return Result.FromCode<ValidateResult>(orderExitResult.Code);
            result.Order = orderExitResult.Data;

            result.Park = await _parkRepository.GetAsync(result.Order.TOBodies.First().ParkId);

            return Result.FromData(result);
        }


        /// <summary>
        /// 取消订单业务验证
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task<Result<ValidateResult>> OrderCancelValidate(OTACancelOrderInput input)
        {
            ValidateResult result = new ValidateResult();

            //必须先验证公园编号
            //验证公园编号
            var parkCodeResult = await ValidateParkCode(input);
            if (!parkCodeResult.Success)
                return Result.FromCode<ValidateResult>(parkCodeResult.Code);
            result.Park = parkCodeResult.Data;

            //验证订单是否存在
            input.ValidOrderId.AgentOrderId = input.AgentOrderId;
            input.ValidOrderId.TOHeaderId = input.TOHeaderId;
            input.ValidOrderId.AgencyId = input.AgencyId;
            var orderExitResult = await ValidateOrderExit(input);
            if (!orderExitResult.Success)
                return Result.FromCode<ValidateResult>(orderExitResult.Code);
            result.Order = orderExitResult.Data;


            var orderCanCancel = await ValidateOrderCanCancel(result.Order);
            if (!orderCanCancel.Success)
                return Result.FromCode<ValidateResult>(orderCanCancel.Code);

            return Result.FromData(result);
        }

        /// <summary>
        /// 支付确认业务验证
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task<Result<ValidateResult>> PayOrderValidate(PayOrderInput input)
        {
            var result = new ValidateResult();

            //必须先验证公园编号
            //验证公园编号
            var parkCodeResult = await ValidateParkCode(input);
            if (!parkCodeResult.Success)
                return Result.FromCode<ValidateResult>(parkCodeResult.Code);
            result.Park = parkCodeResult.Data;

            //验证订单是否存在
            input.ValidOrderId.TOHeaderId = input.TOHeaderId;
            input.ValidOrderId.AgencyId = input.AgencyId;
            var orderExitResult = await ValidateOrderExit(input);
            if (!orderExitResult.Success)
                return Result.FromCode<ValidateResult>(orderExitResult.Code);
            result.Order = orderExitResult.Data;

            //验证是否待支付
            var orderIsPayResult = await ValidateOrderIsPay(result.Order);
            if (!orderIsPayResult.Success)
                return Result.FromCode<ValidateResult>(orderIsPayResult.Code);

            return Result.FromData(result);
        }

        /// <summary>
        /// 修改身份证业务验证
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task<Result<ValidateResult>> ModifyPidValidate(ModifyPidInput input)
        {
            ValidateResult result = new ValidateResult();
            //必须先验证公园编号
            //验证公园编号
            var parkCodeResult = await ValidateParkCode(input);
            if (!parkCodeResult.Success)
                return Result.FromCode<ValidateResult>(parkCodeResult.Code);
            result.Park = parkCodeResult.Data;

            //验证订单是否存在
            input.ValidOrderId.AgentOrderId = input.AgentOrderId;
            input.ValidOrderId.AgencyId = input.AgencyId;
            var orderResult = await ValidateOrderExit(input);
            if (!orderResult.Success)
                return Result.FromCode<ValidateResult>(orderResult.Code);
            result.Order = orderResult.Data;
            //验证身份证格式
            var pidResult = await ValidatePidFormat(input.Pid);
            var oldPidResult = await ValidatePidFormat(input.OldPid);
            if (!pidResult.Success || !oldPidResult.Success)
                return Result.FromCode<ValidateResult>(ResultCode.IdnumError);

            return Result.FromData(result);
        }

        private async Task<Result<ValidateResult>> ModifyPlandateValidate(OTAModifyPlandateInput input)
        {
            ValidateResult result = new ValidateResult();
            //必须先验证公园编号
            //验证公园编号
            var parkCodeResult = await ValidateParkCode(input);
            if (!parkCodeResult.Success)
                return Result.FromCode<ValidateResult>(parkCodeResult.Code);
            result.Park = parkCodeResult.Data;

            //验证订单是否存在
            input.ValidOrderId.AgentOrderId = input.AgentOrderId;
            input.ValidOrderId.AgencyId = input.AgencyId;
            var orderResult = await ValidateOrderExit(input);
            if (!orderResult.Success)
                return Result.FromCode<ValidateResult>(orderResult.Code);
            result.Order = orderResult.Data;

            return Result.FromData(result);

        }

        /// <summary>
        /// 验证公园编码是否存在
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private async Task<Result<Park>> ValidateParkCode(ValidateParams data)
        {
            if (data.ValidParkCode <= 0)
                return Result.FromCode<Park>(ResultCode.ParkNoExist);

            //验证公园编号是否存在
            var park = await _parkRepository.FirstOrDefaultAsync(p => p.ParkCode == data.ValidParkCode && p.IsActive);
            if (park == null)
                return Result.FromCode<Park>(ResultCode.ParkNoExist);

            return Result.FromData(park);
        }


        /// <summary>
        /// 验证订票日期是否大于当天
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private Task<Result> ValidatePlanDate(ValidateParams data)
        {
            if (data.ValidPlanDate.Date < DateTime.Now.Date)
                return Task.FromResult(Result.FromCode(ResultCode.OrderPlanDataError));

            return Task.FromResult(Result.Ok());
        }



        /// <summary>
        /// 验证票类是否有效
        /// </summary>
        /// <param name="data"></param>
        /// <param name="parkId"></param>
        /// <param name="agencyId"></param>
        /// <returns></returns>
        private async Task<Result<Dictionary<string, AgencySaleTicketClass>>> ValidateTicketType(ValidateParams data, int parkId, int agencyId)
        {
            Dictionary<string, AgencySaleTicketClass> ticketTypes = new Dictionary<string, AgencySaleTicketClass>();
            //验证票类
            foreach (string ticketTypeid in data.ValidTicketTypeIds)
            {
                //票类ID无效
                if (string.IsNullOrEmpty(ticketTypeid))
                {
                    //票类无效返回无效票类ID
                    var dto = new Dictionary<string, AgencySaleTicketClass>() { { ticketTypeid, null } };
                    return Result.FromCode(ResultCode.OrderTicketTypeIdError, dto);
                }

                var ticketTypeList = await _agencySaleTicketClassRepository.GetAllListAsync(p =>
                        //兼容处理,下单票类是基础票种'T0'或者代理商票类ID
                        p.ParkSaleTicketClass.TicketClass.TicketTypeId == ticketTypeid &&
                        p.AgencyId == agencyId &&
                        p.ParkId == parkId &&
                        p.Status == TicketClassStatus.Sailing &&
                        //长期票或者在有效期内
                        ((p.SaleEndDate != null && p.SaleStartDate != null && p.SaleStartDate <= data.ValidPlanDate && p.SaleEndDate >= data.ValidPlanDate) || (p.SaleStartDate == null && p.SaleEndDate == null)));

                if (ticketTypeList.Count != 1)
                {
                    return Result.FromCode<Dictionary<string, AgencySaleTicketClass>>(ResultCode.OrderTicketTypeIdError);
                }

                if (!ticketTypes.ContainsKey(ticketTypeid))
                    ticketTypes.Add(ticketTypeid, ticketTypeList.First());
            }

            return Result.FromData(ticketTypes);

        }

        /// <summary>
        /// 验证身份证可定票数
        /// </summary>
        /// <param name="data"></param>
        /// <param name="parkId"></param>
        /// <param name="agencyId"></param>
        /// <returns></returns>
        private async Task<Result> ValidatePidTicketNum(ValidateParams data, int parkId, int agencyId)
        {
            var list =
                data.ValidPidAllowQties.GroupBy(p => p.Pid)
                    .Select(o => new ValidPidAllowQty() { Pid = o.Key, Qty = o.Sum(i => i.Qty) });

            foreach (var item in list)
            {
                //代理商类型 OTA/自有渠道
                var defaultAgencyType =
                    await _parkAgencyRepository.GetAll()
                        .Where(p => p.ParkId == parkId && p.AgencyId == agencyId)
                        .Select(p => p.AgencyType.DefaultAgencyType).FirstAsync();

                //自有渠道不传身份证 无限制订票
                if (defaultAgencyType == DefaultAgencyType.OwnOta && string.IsNullOrEmpty(item.Pid))
                    return Result.Ok();

                var rule = await _parkAgencyTypeGroupTypeRepository.GetAll().Where(p => p.ParkId == parkId &&
                                                                                   p.AgencyType.DefaultAgencyType ==
                                                                                   defaultAgencyType)
                    .Select(p => new { p.AgencyRule.IsNeedIdnum, p.AgencyRule.IdnumTicketQty }).FirstOrDefaultAsync();

                //不需要验证身份证
                if (!rule.IsNeedIdnum)
                    continue;

                var ticketNumResult = await _toBodyDomainService.PidOrderTicketAmount(parkId,item.Pid, agencyId, data.ValidPlanDate);
                if (ticketNumResult.Data + item.Qty > rule.IdnumTicketQty.Value)
                    return Result.FromCode(ResultCode.OrderIdnumUseLimit);
            }
            return Result.Ok();
        }


        /// <summary>
        /// 检查身份证格式
        /// </summary>
        /// <param name="pid"></param>
        /// <returns></returns>
        private async Task<Result> ValidatePidFormat(string pid)
        {
            var result = await Task.FromResult(Regex.IsMatch(pid, @"^(^\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$", RegexOptions.IgnoreCase));
            if (!result)
                return Result.FromCode(ResultCode.IdnumError);
            return Result.Ok();
        }


        /// <summary>
        /// 验证订单是否存在
        /// 默认根据HeaderId验证订单，如果AgentOrderId不为空，则根据第三方订单号判断
        /// 根据AgentOrderId判断时AgencyId也需要赋值
        /// </summary>
        /// <returns></returns>
        private async Task<Result<TOHeader>> ValidateOrderExit(ValidateParams data)
        {
            TOHeader result;
            //根据主订单号判断
            if (string.IsNullOrEmpty(data.ValidOrderId.AgentOrderId))
            {
                var toHeaderIdExit =
                   await _tOHeaderRepository.GetAll()
                        .AnyAsync(p => p.Id == data.ValidOrderId.TOHeaderId && p.AgencyId == data.ValidOrderId.AgencyId);
                if (!toHeaderIdExit)
                    return Result.FromCode<TOHeader>(ResultCode.OrderidNoExists);
                result = await _tOHeaderRepository.GetAllIncluding(p => p.Agency).FirstOrDefaultAsync(p => p.Id == data.ValidOrderId.TOHeaderId && p.AgencyId == data.ValidOrderId.AgencyId);
                return Result.FromData(result);
            }

            //第三方订单号&代理商ID
            var agentOrderIdExit = await
                _tOHeaderRepository.GetAll()
                    .AnyAsync(
                        p =>
                            p.AgentOrderId == data.ValidOrderId.AgentOrderId && p.AgencyId == data.ValidOrderId.AgencyId);
            if (!agentOrderIdExit)
                return Result.FromCode<TOHeader>(ResultCode.OrderidNoExists);
            result = await _tOHeaderRepository.GetAllIncluding(p => p.Agency).FirstOrDefaultAsync(p => p.AgentOrderId == data.ValidOrderId.AgentOrderId && p.AgencyId == data.ValidOrderId.AgencyId);
            return Result.FromData(result);
        }


        /// <summary>
        /// 验证是否是自有渠道
        /// </summary>
        /// <returns></returns>
        private async Task<Result<OTAType>> ValidateIsOwnOTA(ValidateParams data)
        {
            //获取代理商类型
            var agencyType =
            _parkAgencyRepository.GetAllIncluding(p => p.AgencyType)
                .Where(p => p.AgencyId == data.ValidOTAType.AgencyId)
                .FirstOrDefaultAsync()
                .Result?.AgencyType.DefaultAgencyType;

            if (agencyType == DefaultAgencyType.Ota)
                return Result.FromData(OTAType.OTA);
            else if (agencyType == DefaultAgencyType.OwnOta)
                return Result.FromData(OTAType.OwnOTA);
            else
                return Result.FromCode<OTAType>(ResultCode.Fail);
        }

        /// <summary>
        /// 验证订单状态是否待支付
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        private async Task<Result> ValidateOrderIsPay(TOHeader order)
        {
            if (order.TOBodies.Any(p => p.OrderState != OrderState.WaitPay))
                return Result.FromCode(ResultCode.OrderTicketPayed);

            return Result.Ok();
        }

        /// <summary>
        /// 验证订单是否允许取消
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        private async Task<Result> ValidateOrderCanCancel(TOHeader order)
        {

            //未支付订单不允许取消
            if (order.TOBodies.Any(p => p.OrderState == OrderState.WaitPay))
                return Result.FromCode(ResultCode.OrderCancelFailForNoPay);

            //已冻结订单不允许取消
            if (order.TOBodies.Any(p => p.OrderState == OrderState.Freezon))
                return Result.FromCode(ResultCode.OrderCancelFailFrozen);

            //已消费订单不允许取消
            if (order.TOBodies.Any(p => p.OrderState == OrderState.TradeSuccess))
                return Result.FromCode(ResultCode.OrderCancelFailAlreadyUsed);

            //订单已取消
            if (order.TOBodies.All(p => p.OrderState == OrderState.OrderRefunded || p.OrderState == OrderState.OrderCancel))
                return Result.FromCode(ResultCode.OrderAlreadyCancel);

            return Result.Ok();
        }

        private async Task<Result> ValidateOrderAmount(ICollection<OTAOrderDetailInput> orderDetails)
        {
            //核对订单金额
            decimal amount = 0;
            foreach (var body in orderDetails)
            {
                var ticketData = await _agencySaleTicketClassAppService.GetByIdAsync(body.AgencySaleTicketClassId);
                amount += ticketData.SalePrice * body.Qty;
            }
            //验证支付金额之和是否等于后台计算总金额
            decimal? payDetailSum = orderDetails.Sum(body => body?.SalePrice * body.Qty);
            if (payDetailSum != amount)
                return Result.FromCode<ValidateResult>(ResultCode.OrderTotalPriceError);

            return Result.Ok();
        }

    }

    /// <summary>
    /// 比较长期票是否与活动票重复
    /// </summary>
    public class IsTOVoucherEqual : IEqualityComparer<TOVoucher>
    {
        public bool Equals(TOVoucher x, TOVoucher y)
        {
            if (x == null)
                return y == null;
            return x.TOBodyId == y.TOBodyId;
        }

        public int GetHashCode(TOVoucher obj)
        {
            if (obj == null)
                return 0;
            return obj.Id.GetHashCode();
        }
    }

    class RefundFailedException : Exception
    {

    }
}
